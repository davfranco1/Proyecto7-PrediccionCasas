import streamlit as st
import pandas as pd
import pickle
import time

from category_encoders import TargetEncoder, OneHotEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor

# Configurar la p√°gina de Streamlit
st.set_page_config(
    page_title="Predicci√≥n de Precios de Casas",
    page_icon="üè†",
    layout="centered",
)

# T√≠tulo y descripci√≥n
st.title("üè† Predicci√≥n de Precios de Casas en Madrid con Machine Learning")
st.write("Esta aplicaci√≥n permite predecir el precio del alquiler de una casa bas√°ndonos en sus caracter√≠sticas.")

# Mostrar una imagen llamativa
st.image(
    "images/header.png",  # URL de la imagen
    #caption="Tu pr√≥xima casa est√° aqu√≠.",
    use_container_width=True,
)

# Cargar los modelos y transformadores entrenados
def load_models():
    with open('modelos/onehot_encoder.pkl', 'rb') as f:
        onehot_encoder = pickle.load(f)

    with open('modelos/target_encoder.pkl', 'rb') as f:
        target_encoder = pickle.load(f)

    with open('modelos/standard_scaler.pkl', 'rb') as f:
        scaler = pickle.load(f)

    with open('modelos/rf_regressor.pkl', 'rb') as f:
        model = pickle.load(f)

    return onehot_encoder, target_encoder, scaler, model

onehot_encoder, target_encoder, scaler, model = load_models()

# Formularios de entrada
st.header("üîß Caracter√≠sticas de la casa")
col1, col2 = st.columns(2)

with col1:
    propertytype = st.selectbox("Tipo de Casa", ["flat", "studio", "duplex", "penthouse", "chalet", "countryHouse"], help="Selecciona el tipo de casa.")
    exterior = st.selectbox("Exterior", ["True", "False", "Sin informaci√≥n"], help="Elige caracter√≠stica de la casa.")
    hasLift = st.selectbox("Tiene Ascensor", ["True", "False"], help="Elige caracter√≠stica de la casa.")
    municipality = st.selectbox("Municipio", ['Madrid', 'San Sebasti√°n de los Reyes', 'Villamanrique de Tajo',
       'Rascafr√≠a', 'Manzanares el Real', 'Miraflores de la Sierra',
       'Galapagar', 'Arganda', 'San Lorenzo de el Escorial',
       'Villanueva del Pardillo', 'Aranjuez', 'Las Rozas de Madrid',
       'Navalcarnero', 'Alcal√° de Henares', 'El Escorial', 'Legan√©s',
       'Coslada', 'Torrej√≥n de Ardoz', 'Camarma de Esteruelas',
       'Alcorc√≥n', 'Valdemoro', 'Collado Villalba', 'Getafe',
       'Paracuellos de Jarama', 'El Molar', 'Parla', 'Tres Cantos',
       'Quijorna', 'Valdemorillo', 'Pedrezuela', 'Daganzo de Arriba',
       'Guadarrama', 'Cobe√±a', 'El √Ålamo', 'Algete', 'Rivas-Vaciamadrid',
       'Pinto', 'Los Santos de la Humosa', 'San Fernando de Henares',
       'Aldea del Fresno', 'Fuenlabrada', 'Mataelpino', 'Villa del Prado',
       'Los Molinos', 'Colmenar Viejo', 'M√≥stoles', 'Navalafuente',
       'Robledo de Chavela', 'Villaviciosa de Od√≥n', 'Pozuelo de Alarc√≥n',
       'Bustarviejo', 'Collado Mediano', 'Chinch√≥n', 'Colmenarejo',
       'Loeches', 'Sevilla la Nueva', 'Campo Real', 'Torrelaguna',
       'Villalbilla', 'Alcobendas'])

with col2:
    rooms = st.number_input("N√∫mero de Habitaciones", min_value=1, max_value=6, step=1)
    bathrooms = st.number_input("N√∫mero de Ba√±os", min_value=1, max_value=3, step=1)
    size = st.number_input("√Årea en m¬≤", min_value=50, max_value=100, step=10)
    floor = st.number_input("Planta", min_value=0, max_value=14, step=1)
    distance = st.number_input("Distancia al centro", min_value=0, max_value=10000, step=1)

# Bot√≥n para realizar la predicci√≥n
if st.button("üí° Predecir Precio"):
    # Crear DataFrame con los datos ingresados
    nueva_casa = pd.DataFrame({
    'propertyType': [propertytype], 
    'size': [size],
    'exterior': [exterior],
    'rooms': [rooms],
    'bathrooms': [bathrooms],
    'municipality':[municipality],
    'distance':[distance],
    'floor':[floor],
    'hasLift':[hasLift]
    })

    df_new = pd.DataFrame(nueva_casa)
    df_new

    df_pred = df_new.copy()
    col_num=["size", "distance"]
    df_pred[col_num] = scaler.transform(df_pred[col_num])

    df_pred['hasLift'] = df_pred['hasLift'].map({
        "True": 1, 
        "False": 0, 
        'Sin informaci√≥n': -1
    })

    df_pred['exterior'] = df_pred['exterior'].map({
        "True": 1, 
        "False": 0, 
        'Sin informaci√≥n': -1
    })

    df_pred['floor'] = df_pred['floor'].map({
        'st': -2, 
        'ss': -1,
        'bj': 0,
        'en': 0.5, 
        'Sin informaci√≥n': -3
    }).fillna(df_pred['floor']) 

    # Transformar columna con OneHot
    df_pred["municipality"] = target_encoder.transform(df_pred["municipality"])

    # Transformar columna con Target
    encoded_array = onehot_encoder.transform(df_pred[["propertyType"]])

    # Crear un DF con las nuevas columnas
    encoded_df = pd.DataFrame(
        encoded_array,
        columns=onehot_encoder.get_feature_names_out(["propertyType"]),
        index=df_pred.index
    )

    # Concatenar con el DF original
    df_pred = pd.concat([df_pred.reset_index(drop=True), encoded_df.reset_index(drop=True)], axis=1)

    # Drop de la columna original que ya no necesitamos
    df_pred.drop("propertyType", axis=1, inplace=True)

    df_pred.rename(columns= {"size":"size_standard", "distance":"distance_standard"}, inplace=True)

    df_pred = df_pred[['exterior', 'rooms', 'bathrooms', 'floor', 'hasLift',
        'propertyType_chalet', 'propertyType_countryHouse',
        'propertyType_duplex', 'propertyType_flat', 'propertyType_penthouse',
        'propertyType_studio', 'municipality', 'size_standard',
        'distance_standard']]

    # Realizar la predicci√≥n
    prediction = round(model.predict(df_pred)[0],0)

    # Mostrar el resultado
    with st.spinner('Estamos calculando el valor del alquiler...'):
        time.sleep(3)
    st.success(f"üíµ El precio estimado del alquiler de la casa es de {prediction}‚Ç¨")

# Pie de p√°gina
st.markdown(
    """
    ---
    **Proyecto creado con el potencial de la ciencia de datos.**  
    Desarrollado con ‚ù§Ô∏è usando Streamlit.
    """,
    unsafe_allow_html=True,
)